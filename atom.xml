<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知</title>
  <subtitle>Just do it!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jzman.duoshuo.com/"/>
  <updated>2017-05-13T17:59:21.071Z</updated>
  <id>http://jzman.duoshuo.com/</id>
  
  <author>
    <name>jzman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>my new post</title>
    <link href="http://jzman.duoshuo.com/2017/03/09/my-new-post/"/>
    <id>http://jzman.duoshuo.com/2017/03/09/my-new-post/</id>
    <published>2017-03-08T16:45:00.000Z</published>
    <updated>2017-05-13T17:59:21.071Z</updated>
    
    <content type="html"><![CDATA[<h3 id="测试博客"><a href="#测试博客" class="headerlink" title="测试博客"></a>测试博客</h3><p>下周也许是我们在这的最后一周…</p>
<h3 id="Touch事件传递的开始"><a href="#Touch事件传递的开始" class="headerlink" title="Touch事件传递的开始"></a>Touch事件传递的开始</h3><p>Activity中主要两个与事件传递相关的方法，dispatchTouchEvent()和onTouchEvent()，事件传递由Activity的dispatchTouchEvent()方法开始</p>
<h4 id="1-事件分发"><a href="#1-事件分发" class="headerlink" title="1.事件分发"></a>1.事件分发</h4><p>Activity中的事件分发方法：dispatchTounchEvent()，其源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//事件分发</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">        <span class="comment">//空方法</span></div><div class="line">        onUserInteraction();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//onTouchEvent()方法默认返回false</span></div><div class="line">    <span class="keyword">return</span> onTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中调用了Window类的superDispatchTouchEvent(ev)方法，这是一个抽象方法，那么当调用这个方法的时候，就会去调用具体子类中的方法，Window类的具体子类就是PhoneWindow类，里面的具体实现的superDispatchTouchEvent(ev)方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Window类里面的抽象方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</div><div class="line"><span class="comment">//Windoe子类PhoneWindow类中superDispatchTouchEvent()方法的具体实现</span></div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显然，这里有调用了mDecor.superDispatchTouchEvent(event)，mDecor是一个PhoneWindow.DecorView对象，这也是窗口的顶层视图。它是一个真正Activity的root view,它继承了FrameLayout,通过super.dispatchTouchEvent，会把touchevent派发给各个activity的子view，也就是我们在Activity.onCreat方法中setContentView时设置的view,代码参考如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//DecorView类声明</div><div class="line">private final class DecorView extends FrameLayout implements RootViewSurfaceTaker &#123;</div><div class="line">    ...</div><div class="line">    public boolean superDispatchTouchEvent(MotionEvent event) &#123;</div><div class="line">        //这里又调用了FrameLayout中的dispatchTouchEvent方法</div><div class="line">        return super.dispatchTouchEvent(event);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于在FrameLayout并没有重写dispatchTouchEvent(event)方法，因此我们需要FrameLayout的父类也就是ViewGroup中该方法的实现，由该方法进行事件的具体分发，这里具体事件分发过程有待研究。</p>
<h4 id="2-事件处理"><a href="#2-事件处理" class="headerlink" title="2.事件处理"></a>2.事件处理</h4><p>Activity中的事件处理方法：onTouchEvent()，其源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//事件处理,默认返回false</div><div class="line">public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        if (mWindow.shouldCloseOnTouch(this, event)) &#123;</div><div class="line">            finish();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        //默认返回false</div><div class="line">        return false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>由于对于onTouchEvent()方法来说，事件传递是向父控件传递的，即使返回false,事件也相当于被消费了。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul>
<li>Activity中拥有与事件相关的两个方法dispatchTouchEvent()和onTouchEvent()。</li>
<li>Activity进行事件分发时，只有return super.dispatchTouchEvent(ev)时，事件才继续向下传递，返回true或false都事件就被消费了，也就是终止了事件的传播。<h3 id="ViewGroup"><a href="#ViewGroup" class="headerlink" title="ViewGroup"></a>ViewGroup</h3>ViewGroup中主要三个与事件传递相关的方法：dispatchTouchEvent()、onInterceptTouchEvent()和onTouchEvent()。<h4 id="1-事件分发-1"><a href="#1-事件分发-1" class="headerlink" title="1.事件分发"></a>1.事件分发</h4>ViewGroup中的事件分发方法：dispatchTouchEvent()，其源码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">    ...</div><div class="line">    boolean handled = false;</div><div class="line"></div><div class="line">    //给方法决定是否拦截事件的分发</div><div class="line">    onInterceptTouchEvent(ev);</div><div class="line">    ...</div><div class="line">    //该方法将事件传递给子View</div><div class="line">    dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) &#123;</div><div class="line">    ...                </div><div class="line">    return handled;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法的作用就是遍历ViewGroup中的子View,将事件(ACTION_DOWN)交有子View进行处理，里面主要调用了onInterceptTouchEvent()和dispatchTransformedTouchEvent()方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;测试博客&quot;&gt;&lt;a href=&quot;#测试博客&quot; class=&quot;headerlink&quot; title=&quot;测试博客&quot;&gt;&lt;/a&gt;测试博客&lt;/h3&gt;&lt;p&gt;下周也许是我们在这的最后一周…&lt;/p&gt;
&lt;h3 id=&quot;Touch事件传递的开始&quot;&gt;&lt;a href=&quot;#Touch事件传递的
    
    </summary>
    
      <category term="Android" scheme="http://jzman.duoshuo.com/categories/Android/"/>
    
    
      <category term="npm" scheme="http://jzman.duoshuo.com/tags/npm/"/>
    
      <category term="github" scheme="http://jzman.duoshuo.com/tags/github/"/>
    
      <category term="android" scheme="http://jzman.duoshuo.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jzman.duoshuo.com/2017/03/08/hello-world/"/>
    <id>http://jzman.duoshuo.com/2017/03/08/hello-world/</id>
    <published>2017-03-07T17:22:14.990Z</published>
    <updated>2017-03-12T06:35:57.630Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
