<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知</title>
  <subtitle>Just do it!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jzman.duoshuo.com/"/>
  <updated>2017-06-04T07:09:55.326Z</updated>
  <id>http://jzman.duoshuo.com/</id>
  
  <author>
    <name>jzman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RecyclerView的刷新分页</title>
    <link href="http://jzman.duoshuo.com/2017/06/04/RecyclerView%E7%9A%84%E5%88%B7%E6%96%B0%E5%88%86%E9%A1%B5/"/>
    <id>http://jzman.duoshuo.com/2017/06/04/RecyclerView的刷新分页/</id>
    <published>2017-06-04T07:06:38.000Z</published>
    <updated>2017-06-04T07:09:55.326Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中常常使用到刷新分页，这里实现一个 RecyclerView 的简单的刷新分页操作。</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol>
<li>加载更多数据使用到 RecyclerView 加载多种布局，根据 ViewType 判断加载数据 Item 还是加载 FooterItem ;</li>
<li>通过线程模拟加载数据;</li>
<li>为 RecyclerView 添加 addOnScrollListener 事件来监听用户的滑动操作;</li>
<li>根据用户滑动状态以及具体情况开始加载数据</li>
<li>通知数据更新;</li>
</ol>
<h3 id="如何获得-firstVisibleItemPosition"><a href="#如何获得-firstVisibleItemPosition" class="headerlink" title="如何获得 firstVisibleItemPosition"></a>如何获得 firstVisibleItemPosition</h3><p>为了能够在数据加载中动态判断什么时候加载数据，需要知道屏幕上显示的第一个可见的 Item 的位置，当然了这里使用的是布局管理器是 LinearLayoutManager ,这样查找屏幕上第一个可见的 Item 就显得容易多了，下面介绍一些 LinearLayoutManager 的四个方法：</p>
<h4 id="findFirstVisibleItemPosition"><a href="#findFirstVisibleItemPosition" class="headerlink" title="findFirstVisibleItemPosition()"></a>findFirstVisibleItemPosition()</h4><p>获得屏幕上第一个可见 Item 的 position，只要该 Item 有一部分可见，那么返回的 position 就是该Item 的 position。</p>
<h4 id="findFirstCompletelyVisibleItemPosition"><a href="#findFirstCompletelyVisibleItemPosition" class="headerlink" title="findFirstCompletelyVisibleItemPosition()"></a>findFirstCompletelyVisibleItemPosition()</h4><p>获得屏幕上第一个完整可见的 Item 的 position，只要该 Item 有一部分不可见，那么返回的 position 就是该 Item 对应的下一个能显示完整的 Item 的position。</p>
<h4 id="findLastVisibleItemPosition"><a href="#findLastVisibleItemPosition" class="headerlink" title="findLastVisibleItemPosition()"></a>findLastVisibleItemPosition()</h4><p>获得屏幕上最后一个可见 Item 的 position，只要该 Item 有一部分可见，那么返回的 position 就是该Item 的 position。</p>
<h4 id="findLastCompletelyVisibleItemPosition"><a href="#findLastCompletelyVisibleItemPosition" class="headerlink" title="findLastCompletelyVisibleItemPosition()"></a>findLastCompletelyVisibleItemPosition()</h4><p>获得屏幕上最后一个完整可见的 Item 的 position，只要该 Item 有一部分不可见，那么返回的 position 就是该 Item 对应的上一个能显示完整的 Item 的position。</p>
<h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化数据</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">initData</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</div><div class="line">        arrayList.add(<span class="string">"第"</span>+i+<span class="string">"条数据"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 线程模拟加载数据</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadDataThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        initData();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">2000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//通知主线程更新数据</span></div><div class="line">        Message message = handler.obtainMessage();</div><div class="line">        message.what = UPDATE_DATA;</div><div class="line">        message.obj = arrayList;</div><div class="line">        handler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h3><h4 id="主布局"><a href="#主布局" class="headerlink" title="主布局"></a>主布局</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.manu.mrecyclerview.MainActivity"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Item布局"><a href="#Item布局" class="headerlink" title="Item布局"></a>Item布局</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**item.xml**/</div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:padding</span>=<span class="string">"5dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_recycle"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"data"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#cac3c3"</span></div><div class="line">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**item_footer.xml**/</div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">        <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleSmall"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/progressBar"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"正在努力加载中，请稍后..."</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h4><p>这里使用了 RecyclerView 根据不同的 ViewType 加载多种布局的用法，使用时根据不同的布局创建不同的 ViewHolder , 然后根据不同的 Viewholder 为对应的 Item 添加数据，注意 getItemViewType() 方法的用法，Adapter 代码参考如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jzman on 2017/6/04</div><div class="line"> * RecycleView的Adapter</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RvAdapter1</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; <span class="keyword">implements</span></span></div><div class="line">        <span class="title">View</span>.<span class="title">OnClickListener</span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_FOOTER = <span class="number">0x1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_DATA = <span class="number">0x2</span>;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RvAdapter1</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RvAdapter1</span><span class="params">(Context mContext, ArrayList&lt;String&gt; mList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = mContext;</div><div class="line">        <span class="keyword">this</span>.mList = mList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmList</span><span class="params">(ArrayList&lt;String&gt; mList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mList = mList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用于创建ViewHolder</div><div class="line">     * <span class="doctag">@param</span> parent</div><div class="line">     * <span class="doctag">@param</span> viewTypez</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view ;</div><div class="line">        RecyclerView.ViewHolder vh = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">switch</span> (viewType)&#123;</div><div class="line">            <span class="keyword">case</span> ITEM_DATA:</div><div class="line">                view = LayoutInflater.from(mContext).inflate(R.layout.item,<span class="keyword">null</span>);</div><div class="line">                view.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">                vh = <span class="keyword">new</span> DataViewHolder(view);</div><div class="line">                <span class="comment">//使用代码设置宽高（xml布局设置无效时）</span></div><div class="line">                view.setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(</div><div class="line">                        ViewGroup.LayoutParams.MATCH_PARENT,</div><div class="line">                        ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ITEM_FOOTER:</div><div class="line">                view = LayoutInflater.from(mContext).inflate(R.layout.item_footer,<span class="keyword">null</span>);</div><div class="line">                <span class="comment">//使用代码设置宽高（xml布局设置无效时）</span></div><div class="line">                vh = <span class="keyword">new</span> FooterViewHolder(view);</div><div class="line">                view.setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(</div><div class="line">                        ViewGroup.LayoutParams.MATCH_PARENT,</div><div class="line">                        ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> vh;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取Item的View类型</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">//根据 Item 的 position 返回不同的 Viewtype</span></div><div class="line">        <span class="keyword">if</span> (position == (getItemCount())-<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> ITEM_FOOTER;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> ITEM_DATA;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绑定数据</div><div class="line">     * <span class="doctag">@param</span> holder</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> DataViewHolder)&#123;</div><div class="line">            DataViewHolder dataViewHolder = (DataViewHolder) holder;</div><div class="line">            dataViewHolder.tv_data.setText(mList.get(position));</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> FooterViewHolder)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 选项总数</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mList.size()+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">//根据RecyclerView获得当前View的位置</span></div><div class="line">        <span class="keyword">int</span> position = recyclerView.getChildAdapterPosition(view);</div><div class="line">        <span class="comment">//程序执行到此，会去执行具体实现的onItemClick()方法</span></div><div class="line">        <span class="keyword">if</span> (onItemClickListener!=<span class="keyword">null</span>)&#123;</div><div class="line">            onItemClickListener.onItemClick(recyclerView,view,position,mList.get(position));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建ViewHolder</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line">        TextView tv_data;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DataViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tv_data = (TextView) itemView.findViewById(R.id.tv_recycle);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建footer的ViewHolder</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FooterViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FooterViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OnItemClickListener onItemClickListener;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener onItemClickListener)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.onItemClickListener = onItemClickListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 定义RecyclerView选项单击事件的回调接口</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span></span>&#123;</div><div class="line">        <span class="comment">//参数（父组件，当前单击的View,单击的View的位置，数据）</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(RecyclerView parent,View view, <span class="keyword">int</span> position, String data)</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *   将RecycleView附加到Adapter上</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttachedToRecyclerView</span><span class="params">(RecyclerView recyclerView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttachedToRecyclerView(recyclerView);</div><div class="line">        <span class="keyword">this</span>.recyclerView= recyclerView;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *   将RecycleView从Adapter解除</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetachedFromRecyclerView</span><span class="params">(RecyclerView recyclerView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromRecyclerView(recyclerView);</div><div class="line">        <span class="keyword">this</span>.recyclerView = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><p>这里主要注意 rv.addOnScrollListener(new OnScrollListener() …里面的具体实现，MainActivity 代码参考如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jzman on 2017/6/04 0013.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UPDATE_DATA = <span class="number">0x3</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> RecyclerView rv;</div><div class="line">    RvAdapter1 adapter;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="comment">//加载更多数据时最后一项的索引</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastLoadDataItemPosition;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        rv = (RecyclerView) findViewById(R.id.rv);</div><div class="line"></div><div class="line">        <span class="comment">//设置布局管理器</span></div><div class="line">        rv.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));<span class="comment">//线性</span></div><div class="line"><span class="comment">//        rv.setLayoutManager(new GridLayoutManager(this,4));//线性</span></div><div class="line"><span class="comment">//        rv.setLayoutManager(new StaggeredGridLayoutManager(4,StaggeredGridLayoutManager.VERTICAL));//线性</span></div><div class="line">        initData();</div><div class="line">        adapter = <span class="keyword">new</span> RvAdapter1(<span class="keyword">this</span>,arrayList);</div><div class="line">        adapter.setOnItemClickListener(<span class="keyword">new</span> RvAdapter1.OnItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(RecyclerView parent, View view, <span class="keyword">int</span> position, String data)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        rv.addOnScrollListener(<span class="keyword">new</span> OnScrollListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (newState == SCROLL_STATE_IDLE &amp;&amp;</div><div class="line">                        lastLoadDataItemPosition == adapter.getItemCount())&#123;</div><div class="line">                    <span class="keyword">new</span> LoadDataThread().start();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line"></div><div class="line">                LayoutManager layoutManager = recyclerView.getLayoutManager();</div><div class="line">                <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> LinearLayoutManager)&#123;</div><div class="line">                    LinearLayoutManager manager = (LinearLayoutManager) layoutManager;</div><div class="line">                    <span class="keyword">int</span> firstVisibleItem = manager.findFirstVisibleItemPosition();</div><div class="line">                    <span class="keyword">int</span> l = manager.findLastCompletelyVisibleItemPosition();</div><div class="line">                    lastLoadDataItemPosition = firstVisibleItem+(l-firstVisibleItem)+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        rv.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化数据</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">initData</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)&#123;</div><div class="line">            arrayList.add(<span class="string">"第"</span>+i+<span class="string">"条数据"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程模拟加载数据</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LoadDataThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            initData();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Message message = handler.obtainMessage();</div><div class="line">            message.what = UPDATE_DATA;</div><div class="line">            message.obj = arrayList;</div><div class="line">            handler.sendMessage(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> UPDATE_DATA:</div><div class="line">                    arrayList = (ArrayList&lt;String&gt;) msg.obj;</div><div class="line">                    adapter.setmList(arrayList);</div><div class="line">                    adapter.notifyDataSetChanged();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p><img src="http://opvs5q5qo.bkt.clouddn.com/RecyclerViewFlushPage.gif" alt="image"></p>
<hr>
<p>&lt;完&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中常常使用到刷新分页，这里实现一个 RecyclerView 的简单的刷新分页操作。&lt;/p&gt;
&lt;h3 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;加载更
    
    </summary>
    
      <category term="Android" scheme="http://jzman.duoshuo.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jzman.duoshuo.com/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://jzman.duoshuo.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView实现拖动排序和滑动删除功能</title>
    <link href="http://jzman.duoshuo.com/2017/05/22/RecyclerView%E5%AE%9E%E7%8E%B0%E6%8B%96%E5%8A%A8%E6%8E%92%E5%BA%8F%E5%92%8C%E6%BB%91%E5%8A%A8%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD/"/>
    <id>http://jzman.duoshuo.com/2017/05/22/RecyclerView实现拖动排序和滑动删除功能/</id>
    <published>2017-05-21T17:54:43.000Z</published>
    <updated>2017-06-04T08:49:24.572Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView 的拖动排序需要借助一下 ItemTouchHelper 这个类，ItemTouchHelper 类是 Google 提供的一个支持 RecyclerView 滑动和拖动的一个使用类，下面使用该类实现 RecyclerView 的滑动删除和拖动排序功能。首先大概介绍一下 ItemTouchHelper 的一个内部抽象类  Callback 类。 </p>
<h3 id="ItemTouchHelper-Callback"><a href="#ItemTouchHelper-Callback" class="headerlink" title="ItemTouchHelper.Callback"></a>ItemTouchHelper.Callback</h3><p>该类是ItemTouchHelper类中的一个静态抽象类，作用主要是将ItemTouchHelper于自己的应用联系在一起，让开发者通过ViewHolder控制每一个View的具体行为，接收用户的事件回调。该类里面有三个抽象方法：getMovementFlags、onMove、onSwiped。也是开发中经常要是用的。</p>
<h4 id="getMovementFlags"><a href="#getMovementFlags" class="headerlink" title="getMovementFlags"></a>getMovementFlags</h4><p>该方法返回一个Flags表示Item的三种状态状态：idle(空闲)、 swiping(滑动)、dragging(拖动)，根据RecyclerView不同的布局管理器，设置不同的滑动、拖动方向，一般使用makeMovementFlags(int dragFlags, int swipeFlags)方法返回，dragFlags表示拖动的方向，swipeFlags表示滑动的方向。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span><span class="params">(RecyclerView recyclerView, ViewHolder viewHolder)</span></span>;</div></pre></td></tr></table></figure></p>
<h4 id="onMove"><a href="#onMove" class="headerlink" title="onMove"></a>onMove</h4><p>当ItemTouchHelper拖动一个Item时该方法将会被回调，Item将从旧的位置移动到新的位置，如果不拖动这个方法将从来不会调用,返回true表示Item已经被移动到新的位置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">onMove</span><span class="params">(RecyclerView recyclerView, ViewHolder viewHolder, ViewHolder target)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="onSwiped"><a href="#onSwiped" class="headerlink" title="onSwiped"></a>onSwiped</h4><p>当Item滑动的时候调用，如果不滑动该方法不会被调用，可通过direction做相应的判断执行某些操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onSwiped</span><span class="params">(ViewHolder viewHolder, <span class="keyword">int</span> direction)</span></span>;</div></pre></td></tr></table></figure>
<p>此外经常使用的方法有 onSelectedChanged、clearView等方法。</p>
<h4 id="onSelectedChanged"><a href="#onSelectedChanged" class="headerlink" title="onSelectedChanged"></a>onSelectedChanged</h4><p>当item由静止状态变为滑动或拖动状态时调用此方法，可通过actionState判断Item在哪种状态下执行某些操作，重写该方法时必须调用其父类的该方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSelectedChanged</span><span class="params">(ViewHolder viewHolder, <span class="keyword">int</span> actionState)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (viewHolder != <span class="keyword">null</span>) &#123;</div><div class="line">            sUICallback.onSelected(viewHolder.itemView);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="clearView"><a href="#clearView" class="headerlink" title="clearView"></a>clearView</h4><p>当与用户交互结束或相关动画完成之后被 调用该方法被调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearView</span><span class="params">(RecyclerView recyclerView, ViewHolder viewHolder)</span> </span>&#123;</div><div class="line">        sUICallback.clearView(viewHolder.itemView);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="RecyclerView实现拖动排序"><a href="#RecyclerView实现拖动排序" class="headerlink" title="RecyclerView实现拖动排序"></a>RecyclerView实现拖动排序</h3><p>RecyclerView的拖动排序需要借助一个 android.support.v7.widget.helper.ItemTouchHelper 这个类来实现，拖动排序重点是在接口里面的 onMove(int fromPosition, int toPosition) 方法，其在GridAdapter中的具体实现参考如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onMove(int fromPosition, int toPosition) &#123;</div><div class="line">    if (fromPosition &lt; toPosition) &#123;</div><div class="line">        for (int i = fromPosition; i &lt; toPosition; i++) &#123;</div><div class="line">            Collections.swap(list, i, i + 1);</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        for (int i = fromPosition; i &gt; toPosition; i--) &#123;</div><div class="line">            Collections.swap(list, i, i - 1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    notifyItemMoved(fromPosition, toPosition);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="RecyclerView实现侧滑删除"><a href="#RecyclerView实现侧滑删除" class="headerlink" title="RecyclerView实现侧滑删除"></a>RecyclerView实现侧滑删除</h3><p>RecyclerView的拖动排序需要借助一个 android.support.v7.widget.helper.ItemTouchHelper 这个类来实现，侧滑删除重点是在接口中的 onSwiped(int position)，其在GridAdapter中的具体实现参考如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    Log.i(<span class="string">"drag"</span>,<span class="string">"onSwiped"</span>);</div><div class="line">    list.remove(position);</div><div class="line">    notifyItemRemoved(position);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><h4 id="ItemTouchHelper-Callback-的实现类"><a href="#ItemTouchHelper-Callback-的实现类" class="headerlink" title="ItemTouchHelper.Callback 的实现类"></a>ItemTouchHelper.Callback 的实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jzman on 2017/5/17 0015.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemTouchCallBack</span> <span class="keyword">extends</span> <span class="title">ItemTouchHelper</span>.<span class="title">Callback</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"drag"</span>;</div><div class="line">    <span class="keyword">private</span> OnItemTouchListener onItemTouchListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemTouchListener</span><span class="params">(OnItemTouchListener onItemTouchListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onItemTouchListener = onItemTouchListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据 RecyclerView 不同的布局管理器，设置不同的滑动、拖动方向</div><div class="line">     * 该方法使用 makeMovementFlags(int dragFlags, int swipeFlags) 方法返回</div><div class="line">     * 参数: dragFlags:拖动的方向</div><div class="line">     *      swipeFlags:滑动的方向</div><div class="line">     * <span class="doctag">@param</span> recyclerView</div><div class="line">     * <span class="doctag">@param</span> viewHolder</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span><span class="params">(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"getMovementFlags"</span>);</div><div class="line">        <span class="keyword">if</span> (recyclerView.getLayoutManager() <span class="keyword">instanceof</span> GridLayoutManager ||</div><div class="line">                recyclerView.getLayoutManager() <span class="keyword">instanceof</span> StaggeredGridLayoutManager)&#123;</div><div class="line">            <span class="comment">//此处不需要进行滑动操作，可设置为除4和8之外的整数，这里设为0</span></div><div class="line">            <span class="comment">//不支持滑动</span></div><div class="line">            <span class="keyword">return</span> makeMovementFlags(ItemTouchHelper.UP | ItemTouchHelper.DOWN |</div><div class="line">                                   ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT, <span class="number">0</span> );</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//如果是LinearLayoutManager则只能向上向下滑动，</span></div><div class="line">            <span class="comment">//此处第二个参数设置支持向右滑动</span></div><div class="line">            <span class="keyword">return</span> makeMovementFlags(ItemTouchHelper.UP   | ItemTouchHelper.DOWN , ItemTouchHelper.RIGHT );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当 ItemTouchHelper 拖动一个Item时该方法将会被回调，Item将从旧的位置移动到新的位置</div><div class="line">     * 如果不拖动这个方法将从来不会调用,返回true表示已经被移动到新的位置</div><div class="line">     * <span class="doctag">@param</span> recyclerView</div><div class="line">     * <span class="doctag">@param</span> viewHolder</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span><span class="params">(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"onMove"</span>);</div><div class="line">        <span class="keyword">int</span> fromPosition = viewHolder.getAdapterPosition();</div><div class="line">        <span class="keyword">int</span> toPosition   = target.getAdapterPosition();</div><div class="line">        onItemTouchListener.onMove(fromPosition,toPosition);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当Item被滑动的时候被调用</div><div class="line">     * 如果你不滑动这个方法将不会被调用</div><div class="line">     * <span class="doctag">@param</span> viewHolder</div><div class="line">     * <span class="doctag">@param</span> direction</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span><span class="params">(RecyclerView.ViewHolder viewHolder, <span class="keyword">int</span> direction)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"onSwiped"</span>);</div><div class="line">        <span class="comment">//此处是侧滑删除的主要代码</span></div><div class="line">        <span class="keyword">int</span> position = viewHolder.getAdapterPosition();</div><div class="line">        onItemTouchListener.onSwiped(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当Item被滑动、拖动的时候被调用</div><div class="line">     * <span class="doctag">@param</span> viewHolder</div><div class="line">     * <span class="doctag">@param</span> actionState</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSelectedChanged</span><span class="params">(RecyclerView.ViewHolder viewHolder, <span class="keyword">int</span> actionState)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"onSelectedChanged"</span>);</div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当与用户交互结束或相关动画完成之后被调用</div><div class="line">     * <span class="doctag">@param</span> recyclerView</div><div class="line">     * <span class="doctag">@param</span> viewHolder</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearView</span><span class="params">(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"clearView"</span>);</div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">super</span>.clearView(recyclerView, viewHolder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 移动交换数据的更新监听</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemTouchListener</span> </span>&#123;</div><div class="line">        <span class="comment">//拖动Item时调用</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onMove</span><span class="params">(<span class="keyword">int</span> fromPosition, <span class="keyword">int</span> toPosition)</span></span>;</div><div class="line">        <span class="comment">//滑动Item时调用</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSwiped</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Adapter的实现"><a href="#Adapter的实现" class="headerlink" title="Adapter的实现"></a>Adapter的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by jzman on 2017/05/17 0009.</div><div class="line"> * RecycleView的Adapter</div><div class="line"> */</div><div class="line">public class GridAdapter extends RecyclerView.Adapter&lt;GridAdapter.DataViewHolder&gt; implements View.OnClickListener,ItemTouchCallBack.OnItemTouchListener &#123;</div><div class="line">    private Context context;</div><div class="line">    private List&lt;SimpleTitleGrid&gt; list;</div><div class="line"></div><div class="line">    public GridAdapter(Context context, List&lt;SimpleTitleGrid&gt; list) &#123;</div><div class="line">        this.context = context;</div><div class="line">        this.list = list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建ViewHolder</div><div class="line">     * @param parent</div><div class="line">     * @param viewType</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public DataViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">        //加载item布局文件(每一个)</div><div class="line">        View view = LayoutInflater.from(context).inflate(R.layout.item,null);</div><div class="line"></div><div class="line">        //为View设置单击事件</div><div class="line">        view.setOnClickListener(this);</div><div class="line">        DataViewHolder viewHolder = new DataViewHolder(view);</div><div class="line"></div><div class="line">        //使用代码设置宽高（xml布局设置无效时）</div><div class="line">        view.setLayoutParams(new RecyclerView.LayoutParams(</div><div class="line">                ViewGroup.LayoutParams.MATCH_PARENT,</div><div class="line">                ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">        return viewHolder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 绑定数据</div><div class="line">     * @param holder</div><div class="line">     * @param position</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(DataViewHolder holder, int position) &#123;</div><div class="line">        //设置每一个Item的高度</div><div class="line">        holder.textView.setText(list.get(position).getTitle());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 选项总数</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        return list.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 单击事件</div><div class="line">     * @param v</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        if(onItemClickListener!=null)&#123;</div><div class="line">            int position = recyclerView.getChildAdapterPosition(v);</div><div class="line">            //程序执行到此，会执行该方法的具体实现</div><div class="line">            onItemClickListener.onItemClick(recyclerView,v,position,list.get(position));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onMove(int fromPosition, int toPosition) &#123;</div><div class="line">        if (fromPosition &lt; toPosition) &#123;</div><div class="line">            for (int i = fromPosition; i &lt; toPosition; i++) &#123;</div><div class="line">                Collections.swap(list, i, i + 1);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            for (int i = fromPosition; i &gt; toPosition; i--) &#123;</div><div class="line">                Collections.swap(list, i, i - 1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        notifyItemMoved(fromPosition, toPosition);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onSwiped(int position) &#123;</div><div class="line">        Log.i(&quot;drag&quot;,&quot;onSwiped&quot;);</div><div class="line">        list.remove(position);</div><div class="line">        notifyItemRemoved(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  RecycleView中针对ViewHolder来实现</div><div class="line">     */</div><div class="line">    public static class DataViewHolder extends RecyclerView.ViewHolder &#123;</div><div class="line">        TextView textView;</div><div class="line">        public DataViewHolder(View itemView) &#123;</div><div class="line">            super(itemView);</div><div class="line">            textView = (TextView) itemView.findViewById(R.id.tv_grid);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    private RecyclerView recyclerView;</div><div class="line">    private  OnItemClickListener onItemClickListener;</div><div class="line">    public void setOnItemClickListener(OnItemClickListener onItemClickListener) &#123;</div><div class="line">        this.onItemClickListener = onItemClickListener;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 设计recycleView选项单击事件的回调接口（给外面使用）</div><div class="line">     * 参考ListView选项单击事件方法</div><div class="line">     */</div><div class="line">    public interface OnItemClickListener&#123;</div><div class="line">        //参数（父组件，点击的View，位置，这里可能是某个对象的id或对象/这里不需要）</div><div class="line">        void onItemClick(RecyclerView recyclerView, View view, int position, SimpleTitleGrid obj);</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     *   将RecycleView附加到Adapter上</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void onAttachedToRecyclerView(RecyclerView recyclerView) &#123;</div><div class="line">        super.onAttachedToRecyclerView(recyclerView);</div><div class="line">        this.recyclerView= recyclerView;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     *   将RecycleView从Adapter解除</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void onDetachedFromRecyclerView(RecyclerView recyclerView) &#123;</div><div class="line">        super.onDetachedFromRecyclerView(recyclerView);</div><div class="line">        this.recyclerView = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jzman on 2017/05/17 0029.</div><div class="line"> * RecycleView的Adapter</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">GridAdapter</span>.<span class="title">OnItemClickListener</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> RecyclerView rv_user;</div><div class="line">    <span class="keyword">private</span> GridAdapter adapter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        rv_user = (RecyclerView) findViewById(R.id.rv_user);</div><div class="line">        adapter = <span class="keyword">new</span> GridAdapter(<span class="keyword">this</span>, DataUtils.getUserGrids());</div><div class="line"></div><div class="line">        ItemTouchCallBack touchCallBack = <span class="keyword">new</span> ItemTouchCallBack();</div><div class="line">        touchCallBack.setOnItemTouchListener(adapter);</div><div class="line">        ItemTouchHelper itemTouchHelper = <span class="keyword">new</span> ItemTouchHelper(touchCallBack);</div><div class="line"></div><div class="line">        rv_user.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">3</span>));</div><div class="line"><span class="comment">//        rv_user.setLayoutManager(new LinearLayoutManager(this));</span></div><div class="line">        rv_user.setAdapter(adapter);</div><div class="line">        itemTouchHelper.attachToRecyclerView(rv_user);</div><div class="line"></div><div class="line">        adapter.setOnItemClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(RecyclerView recyclerView, View view, <span class="keyword">int</span> position, SimpleTitleGrid obj)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, obj.getTitle(), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h3><table>
<thead>
<tr>
<th>GridLayoutManager</th>
<th>LinearLayoutManager</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://opvs5q5qo.bkt.clouddn.com/DragRecyclerVIew.gif" alt="image"></td>
<td><img src="http://opvs5q5qo.bkt.clouddn.com/SwipRecyclerView.gif" alt="image"></td>
</tr>
</tbody>
</table>
<p>&lt;完&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RecyclerView 的拖动排序需要借助一下 ItemTouchHelper 这个类，ItemTouchHelper 类是 Google 提供的一个支持 RecyclerView 滑动和拖动的一个使用类，下面使用该类实现 RecyclerView 的滑动删除和拖动排序功
    
    </summary>
    
      <category term="Android" scheme="http://jzman.duoshuo.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jzman.duoshuo.com/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://jzman.duoshuo.com/tags/RecyclerView/"/>
    
      <category term="ItemTouchHelper" scheme="http://jzman.duoshuo.com/tags/ItemTouchHelper/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView 的 Item 的单击事件</title>
    <link href="http://jzman.duoshuo.com/2017/05/17/RecyclerView%E7%9A%84Item%E7%9A%84%E5%8D%95%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
    <id>http://jzman.duoshuo.com/2017/05/17/RecyclerView的Item的单击事件/</id>
    <published>2017-05-16T17:48:16.000Z</published>
    <updated>2017-05-21T18:03:16.538Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView 的每个Item的点击事件并没有像ListView一样封装在组件中，需要Item的单击事件时就需要自己去实现，在Adapter中为RecyclerView添加单击事件参考如下：</p>
<p>RecyclerView的使用方法请参考：<a href="https://jzmanu.github.io/2017/05/14/RecyclerRiew%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#more" target="_blank" rel="external">RecyclerView的简单使用</a></p>
<h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>在RecyclerView的Adapyer中定义单击事件的回调接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义RecyclerView选项单击事件的回调接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span></span>&#123;</div><div class="line">    <span class="comment">//参数（父组件，当前单击的View,单击的View的位置，数据）</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(RecyclerView parent,View view, <span class="keyword">int</span> position, String data)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h4><p>在RecyclerView的Adapyer中声明该接口，并提供setter方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OnItemClickListener onItemClickListener;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener onItemClickListener)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.onItemClickListener = onItemClickListener;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h4><p>在RecyclerView的Adapyer类实现View.OnClickListener接口，并重写onClick(View view)方法，然后设置给接口的事件监听：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RvAdapter1</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RvAdapter1</span>.<span class="title">DataViewHolder</span>&gt; <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line">    ...</div><div class="line">    view.setOnClickListener(<span class="keyword">this</span>);<span class="comment">//设置监听器</span></div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">//根据RecyclerView获得当前View的位置</span></div><div class="line">        <span class="keyword">int</span> position = recyclerView.getChildAdapterPosition(view);</div><div class="line">        <span class="comment">//程序执行到此，会去执行具体实现的onItemClick()方法</span></div><div class="line">        <span class="keyword">if</span> (onItemClickListener!=<span class="keyword">null</span>)&#123;</div><div class="line">            onItemClickListener.onItemClick(recyclerView,view,position,mList.get(position));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h4><p>在MainActivity中通过Adapter设置每个Item的单击事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">adapter.setOnItemClickListener(<span class="keyword">new</span> RvAdapter1.OnItemClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(RecyclerView parent, View view, <span class="keyword">int</span> position, String data)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h4><h5 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jzman on 2017/5/13 0013.</div><div class="line"> * RecycleView的Adapter</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RvAdapter1</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RvAdapter1</span>.<span class="title">DataViewHolder</span>&gt; <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RvAdapter1</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RvAdapter1</span><span class="params">(Context mContext, ArrayList&lt;String&gt; mList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = mContext;</div><div class="line">        <span class="keyword">this</span>.mList = mList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用于创建ViewHolder</div><div class="line">     * <span class="doctag">@param</span> parent</div><div class="line">     * <span class="doctag">@param</span> viewType</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.item,<span class="keyword">null</span>);</div><div class="line">        view.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//使用代码设置宽高（xml布局设置无效时）</span></div><div class="line">        view.setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(</div><div class="line">                ViewGroup.LayoutParams.MATCH_PARENT,</div><div class="line">                ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">        DataViewHolder holder = <span class="keyword">new</span> DataViewHolder(view);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绑定数据</div><div class="line">     * <span class="doctag">@param</span> holder</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(DataViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        holder.tv_data.setText(mList.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 选项总数</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">//根据RecyclerView获得当前View的位置</span></div><div class="line">        <span class="keyword">int</span> position = recyclerView.getChildAdapterPosition(view);</div><div class="line">        <span class="comment">//程序执行到此，会去执行具体实现的onItemClick()方法</span></div><div class="line">        <span class="keyword">if</span> (onItemClickListener!=<span class="keyword">null</span>)&#123;</div><div class="line">            onItemClickListener.onItemClick(recyclerView,view,position,mList.get(position));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建ViewHolder</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line">        TextView tv_data;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DataViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tv_data = (TextView) itemView.findViewById(R.id.tv_recycle);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OnItemClickListener onItemClickListener;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener onItemClickListener)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.onItemClickListener = onItemClickListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 定义RecyclerView选项单击事件的回调接口</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span></span>&#123;</div><div class="line">        <span class="comment">//参数（父组件，当前单击的View,单击的View的位置，数据）</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(RecyclerView parent,View view, <span class="keyword">int</span> position, String data)</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *   将RecycleView附加到Adapter上</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttachedToRecyclerView</span><span class="params">(RecyclerView recyclerView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttachedToRecyclerView(recyclerView);</div><div class="line">        <span class="keyword">this</span>.recyclerView= recyclerView;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *   将RecycleView从Adapter解除</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetachedFromRecyclerView</span><span class="params">(RecyclerView recyclerView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromRecyclerView(recyclerView);</div><div class="line">        <span class="keyword">this</span>.recyclerView = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jzman on 2017/5/13 0013.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> RecyclerView rv;</div><div class="line">    RvAdapter1 adapter;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        rv = (RecyclerView) findViewById(R.id.rv);</div><div class="line">        <span class="comment">//设置布局管理器</span></div><div class="line"><span class="comment">//        rv.setLayoutManager(new LinearLayoutManager(this));//线性</span></div><div class="line">        rv.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">4</span>));<span class="comment">//线性</span></div><div class="line"><span class="comment">//        rv.setLayoutManager(new StaggeredGridLayoutManager(4,StaggeredGridLayoutManager.VERTICAL));//线性</span></div><div class="line">        adapter = <span class="keyword">new</span> RvAdapter1(<span class="keyword">this</span>,initData());</div><div class="line">        adapter.setOnItemClickListener(<span class="keyword">new</span> RvAdapter1.OnItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(RecyclerView parent, View view, <span class="keyword">int</span> position, String data)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        rv.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">initData</span><span class="params">()</span></span>&#123;</div><div class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</div><div class="line">            arrayList.add(<span class="string">"第"</span>+i+<span class="string">"条数据"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arrayList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h4><p><img src="http://opvs5q5qo.bkt.clouddn.com/ItemClickForAdapter.gif" alt="image"></p>
<p>&lt;完&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RecyclerView 的每个Item的点击事件并没有像ListView一样封装在组件中，需要Item的单击事件时就需要自己去实现，在Adapter中为RecyclerView添加单击事件参考如下：&lt;/p&gt;
&lt;p&gt;RecyclerView的使用方法请参考：&lt;a href=
    
    </summary>
    
      <category term="Android" scheme="http://jzman.duoshuo.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jzman.duoshuo.com/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://jzman.duoshuo.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerRiew的简单使用</title>
    <link href="http://jzman.duoshuo.com/2017/05/14/RecyclerRiew%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://jzman.duoshuo.com/2017/05/14/RecyclerRiew的简单使用/</id>
    <published>2017-05-14T04:38:26.000Z</published>
    <updated>2017-06-04T13:07:30.644Z</updated>
    
    <content type="html"><![CDATA[<p>自从Android 5.0之后，google退出了一个RecyclerView控件，他是support-v7包中的新组件，是一个强大的滑动组件，与经典的ListView相比，同样拥有item回收复用的功能，RecyclerView相当于是ListView的升级版。</p>
<p>RecyclerView封装了ViewHolder的回收复用，也就是说RecyclerView标准化了ViewHolder,编写Adapter面向的是ViewHolder而不是View了，复用的逻辑被封装了，写起来更加简单。</p>
<p>RecyclerView提供一种插拔式的体验，高度的解耦，异常的灵活，针对一个Item的显示RecyclerView专门抽取了相应的类，来控制Item的显示，使其的扩展性特别强。</p>
<h4 id="引入RecyclerVIew"><a href="#引入RecyclerVIew" class="headerlink" title="引入RecyclerVIew"></a>引入RecyclerVIew</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:recyclerview-v7:25.1.0'</span></div></pre></td></tr></table></figure>
<h4 id="创建布局文件"><a href="#创建布局文件" class="headerlink" title="创建布局文件"></a>创建布局文件</h4><h5 id="主布局文件"><a href="#主布局文件" class="headerlink" title="主布局文件"></a>主布局文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/*activity_main.xml*/</div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.manu.mrecyclerview.MainActivity"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="Item布局文件"><a href="#Item布局文件" class="headerlink" title="Item布局文件"></a>Item布局文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/*item.xml*/</div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:padding</span>=<span class="string">"5dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_recycle"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"data"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#cac3c3"</span></div><div class="line">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="创建Adapter"><a href="#创建Adapter" class="headerlink" title="创建Adapter"></a>创建Adapter</h4><p>RecyclerView的Adapter要比ListView的Adapter设置起来稍微复杂一点，这也是RecyclerView高度解耦的体现，虽然代码复杂一点，但扩展性很好，下面介绍一下实现RecyclerView的Adapter的三个方法：</p>
<h5 id="onCreateViewHolder"><a href="#onCreateViewHolder" class="headerlink" title="onCreateViewHolder()"></a>onCreateViewHolder()</h5><p>该方法主要是为每个Item加载一个View，但是该方法返回的是一个ViewHolder，该方法吧View直接封装的ViewHolder中，然后我们面向的是ViewHolder这个实例，这个ViewHolder也由自己编写，但不用像ListView调用convertView.setTag(vh)和convertView.getTag()了。</p>
<h5 id="onBindViewHolder"><a href="#onBindViewHolder" class="headerlink" title="onBindViewHolder()"></a>onBindViewHolder()</h5><p>该方法主要用来把数据绑定在View上，直接提供一个ViewHolder而不是convertView。</p>
<h5 id="getItemCount"><a href="#getItemCount" class="headerlink" title="getItemCount()"></a>getItemCount()</h5><p>该方法返回选项总数。</p>
<h5 id="Adapter代码"><a href="#Adapter代码" class="headerlink" title="Adapter代码"></a>Adapter代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jzman on 2017/5/13 0013.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RvAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RvAdapter</span>.<span class="title">DataViewHolder</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RvAdapter</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RvAdapter</span><span class="params">(Context mContext, ArrayList&lt;String&gt; mList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = mContext;</div><div class="line">        <span class="keyword">this</span>.mList = mList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用于创建ViewHolder</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.item,<span class="keyword">null</span>);</div><div class="line">        <span class="comment">//使用代码设置宽高（xml布局设置无效时）</span></div><div class="line">        view.setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(</div><div class="line">                ViewGroup.LayoutParams.MATCH_PARENT,</div><div class="line">                ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">        DataViewHolder holder = <span class="keyword">new</span> DataViewHolder(view);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//绑定数据</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(DataViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        holder.tv_data.setText(mList.get(position));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//数据总数</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//创建ViewHolder</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line">        TextView tv_data;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DataViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tv_data = (TextView) itemView.findViewById(R.id.tv_recycle);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>使用StaggeredGridLayoutManager管理器时，Adapter参考如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jzman on 2017/5/13 0013.</div><div class="line"> * RecycleView的Adapter</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RvAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RvAdapter</span>.<span class="title">DataViewHolder</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mList;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; mHeight;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RvAdapter</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RvAdapter</span><span class="params">(Context mContext, ArrayList&lt;String&gt; mList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = mContext;</div><div class="line">        <span class="keyword">this</span>.mList = mList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化每个Item的高度（瀑布流效果）</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">initHeight</span><span class="params">()</span></span>&#123;</div><div class="line">        mHeight = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mList.size();i++)&#123;</div><div class="line">            mHeight.add((<span class="keyword">int</span>) (Math.random()*<span class="number">300</span>)+<span class="number">200</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mHeight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用于创建ViewHolder</div><div class="line">     * <span class="doctag">@param</span> parent</div><div class="line">     * <span class="doctag">@param</span> viewType</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.item,<span class="keyword">null</span>);</div><div class="line">        <span class="comment">//使用代码设置宽高（xml布局设置无效时）</span></div><div class="line">        view.setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(</div><div class="line">                ViewGroup.LayoutParams.MATCH_PARENT,</div><div class="line">                ViewGroup.LayoutParams.WRAP_CONTENT));</div><div class="line">        DataViewHolder holder = <span class="keyword">new</span> DataViewHolder(view);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绑定数据</div><div class="line">     * <span class="doctag">@param</span> holder</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(DataViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">//设置每个Item的高度</span></div><div class="line">        ViewGroup.LayoutParams h = holder.tv_data.getLayoutParams();</div><div class="line">        h.height = mHeight.get(position);</div><div class="line">        holder.tv_data.setText(mList.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 选项总数</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建ViewHolder</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line">        TextView tv_data;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DataViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tv_data = (TextView) itemView.findViewById(R.id.tv_recycle);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *   将RecycleView附加到Adapter上</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttachedToRecyclerView</span><span class="params">(RecyclerView recyclerView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttachedToRecyclerView(recyclerView);</div><div class="line">        <span class="keyword">this</span>.recyclerView= recyclerView;</div><div class="line">        <span class="comment">//初始化每个Item的高度</span></div><div class="line">        initHeight();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *   将RecycleView从Adapter解除</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetachedFromRecyclerView</span><span class="params">(RecyclerView recyclerView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromRecyclerView(recyclerView);</div><div class="line">        <span class="keyword">this</span>.recyclerView = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jzman on 2017/5/13 0013.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> RecyclerView rv;</div><div class="line">    RvAdapter adapter;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        rv = (RecyclerView) findViewById(R.id.rv);</div><div class="line">        <span class="comment">//设置布局管理器</span></div><div class="line">        rv.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));<span class="comment">//线性</span></div><div class="line"><span class="comment">//        rv.setLayoutManager(new GridLayoutManager(this,4));//线性</span></div><div class="line"><span class="comment">//        rv.setLayoutManager(new StaggeredGridLayoutManager(4,StaggeredGridLayoutManager.VERTICAL));//线性</span></div><div class="line">        adapter = <span class="keyword">new</span> RvAdapter(<span class="keyword">this</span>,initData());</div><div class="line">        rv.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">initData</span><span class="params">()</span></span>&#123;</div><div class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</div><div class="line">            arrayList.add(<span class="string">"第"</span>+i+<span class="string">"条数据"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arrayList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h4><table>
<thead>
<tr>
<th>LinearLayoutManager</th>
<th>GridLayoutManager</th>
<th>StaggeredGridLayoutManager</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://opvs5q5qo.bkt.clouddn.com/RecyclerView_LinearLayoutManager" alt="image"></td>
<td><img src="http://opvs5q5qo.bkt.clouddn.com/RecyclerView_GridLayoutManager" alt="image"></td>
<td><img src="http://opvs5q5qo.bkt.clouddn.com/RecyclerView_StaggeredGridLayoutManager" alt="image">  </td>
</tr>
</tbody>
</table>
<p>&lt;完&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从Android 5.0之后，google退出了一个RecyclerView控件，他是support-v7包中的新组件，是一个强大的滑动组件，与经典的ListView相比，同样拥有item回收复用的功能，RecyclerView相当于是ListView的升级版。&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://jzman.duoshuo.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jzman.duoshuo.com/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://jzman.duoshuo.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jzman.duoshuo.com/2017/03/08/hello-world/"/>
    <id>http://jzman.duoshuo.com/2017/03/08/hello-world/</id>
    <published>2017-03-07T17:22:14.990Z</published>
    <updated>2017-03-12T06:35:57.630Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
